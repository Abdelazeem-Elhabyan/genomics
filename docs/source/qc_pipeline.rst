Running the QC pipelines
========================

Core utilities
**************

There are two core QC scripts:

* **solid_qc.sh**: runs the QC pipeline for csfasta and qual file pair
  (fragment mode) or pair of pairs (paired-end mode) generated by a SOLiD
  instrument (solid2fastq, fastq_screen, solid_preprocess_filter and
  qc_boxplotter).

* **illumina_qc.sh**: runs the QC pipeline for fastq (or fastq.gz) file
  generated by an Illumina instrument (fastq_screen and FASTQC).

There is also a script runner program is **run_pipeline.py**, which is used to
run the scripts on multiple sets of files and which performs various job
management operations (such as job submission to Grid Engine).

QC scripts for SOLiD data
*************************

For each sample the following output files will be produced by ``solid_qc.sh``.

"Fragment" mode (default)
-------------------------

Say that the input SOLiD data file pair is `PB.csfasta` and `PB.qual`, then the
following FASTQ files are produced:

 * `PB.fastq`: all reads
 * `PB_T_F3.csfasta` and `PB_T_F3_QV.qual`: primary data after quality filtering
 * `PB_T_F3.fastq`: reads after quality filtering

Paired-end mode
---------------

Say that the input SOLiD data file pairs are `PB_F3.csfasta`, `PB_F3.qual` and
`PB_F5.csfasta`, `PB_F5.qual`, then the following FASTQ files are produced:

Unfiltered data
---------------

Merging all the original unfiltered data into a single fastq gives:

 * `PB_paired.fastq`: all unfiltered F3 and F5 data merged into a single fastq
 * `PB_paired.F3.fastq`: unfiltered F3 data
 * `PB_paired.F5.fastq`: unfiltered F5 data

Quality filtered data
---------------------

Quality filtering on the primary data gives:

 * `PB_F3_T_F3.csfasta` and `PB_F3_T_F3_QV.qual`: F3 data after quality filter
 * `PB_F5_T_F3.csfasta` and `PB_F5_T_F3_QV.qual`: F5 data after quality filter

(Note that the files with `F5` in the name only have F5 reads - ignore the `F3`
part of `T_F3`.)

"Lenient" filtering and merging the F3 filtered data with all F5 gives:

 * `PB_paired_F3_filt.fastq`: filtered F3 reads with the matching F5 partner
 * `PB_paired_F3_filt.F3.fastq`: just the F3 reads after filtering
 * `PB_paired_F3_filt.F5.fastq`: just the matching F5 partners

(This is called "lenient" as only the quality of the F3 reads is considered.)

"Strict" filtering and merging gives:

 * `PB_paired_F3_and_F5_filt.fastq`: filtered F3 reads and filtered F5 reads,
   with "unpartnered" reads removed
 * `PB_paired_F3_and_F5_filt.F3.fastq`: just the F3 reads
 * `PB_paired_F3_and_F5_filt.F5.fastq`: just the F5 reads

(This is called "strict" filtering as a pair of reads will be rejected on the
quality of either of the F3 or F5 components.)

Filtering statistics
--------------------

The filtering statistics output file name depends on the mode that the pipeline
was run using:

 * `SOLiD_preprocess_filter.stats`: for fragment mode
 * `SOLiD_preprocess_filter_paired.stats`: for paired end mode

In each case the file summarises the number of reads before and after filtering
and merging, and indicates the percentage that have been filtered out (with
typical values being between 20-30%).

Contamination screens (`fastq_screen.sh`)
-----------------------------------------

Contamination screen outputs are written to the `qc` directory:

 * `PB_model_organisms_screen.*`: screen against a selection of commonly used genomes
 * `PB_other_organisms_screen.*`: screen against a selection of less common genomes
 * `PB_rRNA_screen.*`: screen against a selection of rRNAs

For each there are `.txt` and `.png` files.

Boxplots (`qc_boxplotter.sh`)
-----------------------------

Boxplots are written to the `qc` subdirectory:

 * `PB.qual_seq-order_boxplot.*`: plot using all reads (PDF, PNG and PS formats)
 * `PB_T_F3_QV.qual_seq-order_boxplot.*`: plot using just the quality filtered reads

QC scripts for Illumina data
****************************

For each sample the `illumina_qc.sh` generates fastq_screen plots for model
organisms, other organisms and rRNAs plus the report files from FASTQC.

If the input files are `fastq.gz` then it can also produce uncompressed versions
of the files (specify the `--gunzip` option to turn on this behaviour).

This script can be run on data produced by the Illumina GAIIx, MiSEQ and HiSeq
platforms.


Pipeline recipes/examples
*************************

Run the full SOLiD QC pipeline on a set of directories::

    run_qc_pipeline.py solid_qc.sh <dir1> <dir2> ...

Run the SOLiD QC pipeline on paired-end data::

    run_qc_pipeline.py --input=solid_paired_end solid_qc.sh <dir1> <dir2> ...

Run the Illumina QC pipeline on fastq.gz files in a set of directories::

    run_qc_pipeline.py --input=fastqgz illumina_qc.sh <dir1> <dir2> ...

Generate gzipped fastq files only in a set of directories::

    run_qc_pipeline.py "run_solid2fastq.sh --gzip" <dir1> <dir2> ...

Run the fastq_screen steps only on a set of directories::

    run_qc_pipeline.py --input=fastq fastq_screen.sh <dir1> <dir2> ...

Run the SOLiD preprocess filter steps only on a set of directories::

    run_qc_pipeline.py solid_preprocess_filter.sh <dir1> <dir2> ...

To get an email notification on completion of the pipeline::

    run_qc_pipeline.py --email=foo@bar.com ...


Reporting recipes
*****************

The table below indicates the situations in which the reporter should work
automatically, and which options to use in cases when it doesn't:

    +-------------+------------+------------+-----------------------------+
    | Platform    | Data type  | QC mode    | Autodetect?                 |
    +=============+============+============+=============================+
    | SOLiD4      | Fragment   | Fragment   | Yes                         |
    +-------------+------------+------------+-----------------------------+
    | SOLiD4      | Paired-end | Fragment   | Yes                         |
    +-------------+------------+------------+-----------------------------+
    | SOLiD4      | Paired-end | Paired-end | Yes                         |
    +-------------+------------+------------+-----------------------------+
    | GA2x        | Fastq.gz   | n/a        | Yes                         |
    +-------------+------------+------------+-----------------------------+
    | GA2x        | Fastq      | n/a        | No: use --format=fastq      |
    +-------------+------------+------------+-----------------------------+
    | HiSEQ/MiSEQ | Fastq.gz   | n/a        | No: use --platform=illumina |
    +-------------+------------+------------+-----------------------------+
    | HiSEQ/MiSEQ | Fastq      | n/a        | No: use --platform=illumina |
    |             |            |            |         --format=fastq      |
    +-------------+------------+------------+-----------------------------+
